<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"><channel><title>Ø value</title><description></description><link>http://localhost</link><lastBuildDate>13 Jul 13 16:57 -0400</lastBuildDate><generator>trofaf</generator><item><title>Méta-billet: un mot sur le Calepin!</title><link>http://localhost/002-meta-billet</link><description>Il existe de nombreux moteurs de blogue gratuits sur internet. Pourquoi avoir jeté l&#39;ancre sur ce discret et modeste Calepin?</description><author>Martin Angers</author><category></category><pubDate>29 Feb 12 00:00 +0000</pubDate></item><item><title>npm: la base essentielle pour débuter avec node.js</title><link>http://localhost/003-dependances</link><description>La plateforme node.js est volontairement limitée, en son coeur, aux fonctionnalités les plus fondamentales. Elle mise donc sur les contributions de sa communauté pour enrichir le noyau et repousser les limites du possible. Avec près de 8000 librairies à ce jour, il y a sérieux danger de chaos. Et si on y retrouve plutôt quelque chose comme une belle organisation, c&#39;est en bonne partie grâce au gestionnaire de librairies npm.</description><author>Martin Angers</author><category></category><pubDate>05 Mar 12 00:00 +0000</pubDate></item><item><title>npm shrinkwrap: Comment contrôler ses dépendances</title><link>http://localhost/004-npm-packages</link><description>Utiliser une librairie existante permet d&#39;ajouter rapidement des fonctionnalités à une application, et de concentrer ses efforts sur les nouveautés, les spécificités de son projet, plutôt qu&#39;à réinventer la roue. Cependant, chaque librairie utilisée devient une dépendance, et une dépendance est un risque. Un risque car notre code dépend maintenant de ce corps étranger sur lequel on a généralement peu ou pas de contrôle. Les meilleures pratiques pour limiter ce risque ont évolué rapidement sur la plateforme node.js ces derniers mois.</description><author>Martin Angers</author><category></category><pubDate>12 Mar 12 00:00 +0000</pubDate></item><item><title>Structurer une application Web avec Express et Node.js</title><link>http://localhost/005-structurer-express</link><description>La façon d&#39;organiser son code, en divers répertoires et fichiers, est en bonne partie une question de préférence personnelle. Le cadre d&#39;application Web Express n&#39;impose aucune structure particulière, laissant le développeur totalement libre d&#39;arranger le tout selon son inspiration du moment. Cette liberté peut parfois donner le vertige et provoquer un effet pervers: le syndrome de la page blanche.</description><author>Martin Angers</author><category></category><pubDate>19 Mar 12 00:00 +0000</pubDate></item><item><title>Expérimentations sur l&#39;injection de dépendance avec node.js</title><link>http://localhost/006-dependency-injection</link><description>L&#39;injection de dépendance permet de découpler les différentes composantes d&#39;une application pour en faciliter l&#39;entretien, la testabilité, circonscrire l&#39;impact des changements, mais aussi pour imposer une façon d&#39;aborder la création de l&#39;application en une aggrégation de pièces simples, à la responsabilité ciblée, et à l&#39;API bien défini.</description><author>Martin Angers</author><category></category><pubDate>27 Mar 12 00:00 +0000</pubDate></item></channel></rss>